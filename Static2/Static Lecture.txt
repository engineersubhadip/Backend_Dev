# 1.
public class StaticVar {
	
	String name; // Instance variables
	String address;
	String city;
	
	public StaticVar(String name, String address, String city){ // Parameterized Constructor Local Variables
		this.name = name;
		this.address = address;
		this.city = city;
	};
};

Main() {
		StaticVar st1 = new StaticVar("Bob","Mathalli","Bangalore");
		StaticVar st2 = new StaticVar("Ram","Jayanagar","Bangalore");
}

We are creating census report for Bangalore, so we do not need to send Bangalore every time.
We need to create objects and all the objects should point to Bangalore.

public class StaticVar {
	
	String name; // Instance variables
	String address;
	static String city = "Bangalore" // Class variables
	
	public StaticVar(String name, String address){ // Parameterized Constructor Local Variables
		this.name = name;
		this.address = address;
	};
};

Main() {
	StaticVar st1 = new StaticVar("Bob","Mathalli");
	StaticVar st2 = new StaticVar("Ram","Jayanagar");
}

Whenever we declare a variable as Static, then it becomes part of the Class and not part of the Object.
Static Variables are class Variables.


# 2.

public class StaticVar {
	
	String name; // Instance variables
	String address;
	static String city = "Bangalore" // Class variables
	static int i = 0;

	public StaticVar(String name, String address){ // Parameterized Constructor Local Variables
		this.name = name;
		this.address = address;
		i ++;
		print(i);
	};
};

Main() {
	StaticVar st1 = new StaticVar("Bob","Mathalli");
	StaticVar st2 = new StaticVar("Ram","Jayanagar");
}

Output :- 
1
2

Reason :-

Both "st1" and "st2" objects are pointing to "i" variable.
When the Constructor of "st1" gets invoked i = 1
When the Constructor of "st2" gets invoked i = 2
Since, the variable "i" is referenced by both st1 and st2.


# 3.

public class StaticVar {
	
	String name; // Instance variables
	String address;
	static String city = "Bangalore" // Class variables
	int i = 0;

	public StaticVar(String name, String address){ // Parameterized Constructor Local Variables
		this.name = name;
		this.address = address;
		i ++;
		print(i);
	};
};

Main() {
	StaticVar st1 = new StaticVar("Bob","Mathalli");
	StaticVar st2 = new StaticVar("Ram","Jayanagar");
}

Output : 
1
1

Reason :-

"i" is now a instance level variable.
Meaning a fresh copy of "i" is getting created during object creation.
"i" is not getting shared.


# 4.

Static Methods :- Inside static methods we cannot access instance level variables. Inside static methods we can only access static variables.


